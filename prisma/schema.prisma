generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Voting/Contest module ===
model Contest {
  id          String       @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  contestants Contestant[]
  polls       Poll[]
}

model Contestant {
  id        String   @id @default(cuid())
  contestId String
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  name      String
  slug      String
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contestId, slug])
  pollEntries PollContestant[]
  votes       PollVote[]
}

model Poll {
  id          String   @id @default(cuid())
  contestId   String
  contest     Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  title       String
  round       Int       @default(1)
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  contestants PollContestant[]
  votes       PollVote[]

  // Optional bracket linkage: winner goes to nextPoll at slot (1 or 2)
  nextPollId  String?
  nextSlot    Int?
  nextPoll    Poll?     @relation("PollNext", fields: [nextPollId], references: [id])
  previous    Poll[]    @relation("PollNext")

  @@index([contestId, startAt])
  @@index([contestId, endAt])
}

model PollContestant {
  id           String      @id @default(cuid())
  pollId       String
  poll         Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  contestantId String
  contestant   Contestant  @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  tally        Int         @default(0)

  @@unique([pollId, contestantId])
  @@index([pollId])
}

model PollVote {
  id           String   @id @default(cuid())
  pollId       String
  poll         Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  contestantId String
  contestant   Contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  // Hashes used for duplicate prevention and basic anti-abuse.
  voterFingerprintHash String?  @db.Char(64)
  ipHash               String   @db.Char(64)
  userAgentHash        String?  @db.Char(64)
  createdAt            DateTime @default(now())

  @@index([pollId, createdAt])
  @@index([contestantId])
  // One vote per person per poll (when fingerprint is present)
  @@unique([pollId, voterFingerprintHash])
}

model Request {
  id              String        @id @default(cuid())
  songTitle       String
  artist          String
  tableOrName     String?
  status          RequestStatus @default(PENDING)
  votes           Int           @default(0)
  sortIndex       Int           @default(0)
  fingerprintHash String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  voteRecords     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  requestId String
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  ipHash    String
  createdAt DateTime @default(now())
}

model User {
  id   String   @id @default(cuid())
  name String
  role UserRole
}

model Survey {
  id            String           @id @default(cuid())
  name          String
  slug          String           @unique
  description   String?
  status        SurveyStatus     @default(DRAFT)
  effectiveFrom DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  questions     SurveyQuestion[]
  responses     SurveyResponse[]
  raffle        Raffle?
}

model SurveyQuestion {
  id        String       @id @default(cuid())
  surveyId  String
  survey    Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  type      QuestionType
  label     String
  required  Boolean      @default(false)
  order     Int
  helpText  String?
  options   Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SurveyResponse {
  id        String   @id @default(cuid())
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  answers   Json
  completed Boolean  @default(true)
  createdAt DateTime @default(now())
  raffleEntries RaffleEntry[]
}

model Raffle {
  id                       String   @id @default(cuid())
  surveyId                 String   @unique
  survey                   Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  isActive                 Boolean  @default(false)
  publicParticipants       Boolean  @default(true)
  publicDisplayQuestionIds String[] @default([])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  entries RaffleEntry[]
  winners RaffleWinner[]
}

model RaffleEntry {
  id               String   @id @default(cuid())
  raffleId         String
  raffle           Raffle   @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  surveyResponseId String
  surveyResponse   SurveyResponse @relation(fields: [surveyResponseId], references: [id], onDelete: Cascade)

  phoneNorm      String?  @db.VarChar(32)
  ipHash         String   @db.Char(64)
  userAgentShort String?  @db.VarChar(200)
  createdAt      DateTime @default(now())

  @@unique([raffleId, surveyResponseId])
  @@unique([raffleId, ipHash])
  @@unique([raffleId, phoneNorm])
  @@index([raffleId, createdAt])
  winner        RaffleWinner?
}

model RaffleWinner {
  id            String   @id @default(cuid())
  raffleId      String
  raffle        Raffle   @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  raffleEntryId String   @unique
  raffleEntry   RaffleEntry @relation(fields: [raffleEntryId], references: [id], onDelete: Cascade)
  position      Int
  createdAt     DateTime @default(now())

  @@unique([raffleId, position])
  @@index([raffleId])
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  EMAIL
  PHONE
  DATE
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum RequestStatus {
  PENDING
  PLAYING
  DONE
  REJECTED
}

enum UserRole {
  DJ
  ADMIN
  PATRON
}
